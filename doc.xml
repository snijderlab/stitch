<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Main</name>
    </assembly>
    <members>
        <member name="T:AssemblyNameSpace.ToRunWithCommandLine">
            <summary> A Class to be able to run the code from the commandline. To be able to test it easily. 
            This will be rewritten when the code is moved to its new repository </summary>
        </member>
        <member name="T:AssemblyNameSpace.Assembler">
            <summary> The Class with all code to assemble Peptide sequences. </summary>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.reads">
            <value> The reads fed into the Assembler, as opened by OpenReads. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.graph">
            <value> The De Bruijn graph used by the Assembler. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.condensed_graph">
            <value> The condensed graph used to store the output of the assembly. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.kmer_length">
            <value> The length of the k-mers used to create the De Bruijn graph. Private member where it is stored. </value>
        </member>
        <member name="P:AssemblyNameSpace.Assembler.Kmer_length">
            <value> The length of the k-mers used to create the De Bruijn graph. Get and Set is public. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.scoring_matrix">
            <value> The matrix used for scoring of the alignment between two characters in the alphabet. 
            As such this matrix is rectangular. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.alphabet">
            <value> The alphabet used for alignment. The default value is all the amino acids in order of
            natural abundance in prokaryotes to make finding the right amino acid a little bit faster. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.minimum_homology">
            <value> The private member to store the minimum homology value in. </value>
        </member>
        <member name="P:AssemblyNameSpace.Assembler.Minimum_homology">
            <value> The minimum homology value of an edge to include it in the graph. Lowering the limit 
            could result in a longer sequence retrieved from the algorithm but would also greatly increase
            the computational cost of the calculation. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.edge_include_limit">
            <value> The limit to include edges when filtering on highest edges. It will be used to include 
            not only the highest but (depending on the value) a couple more edges. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.meta_data">
            <value> To contain meta information about how the program ran to make informed decisions on 
            how to choose the values of variables and to aid in debugging. </value>
        </member>
        <member name="T:AssemblyNameSpace.Assembler.AminoAcid">
            <summary> A struct to function as a wrapper for AminoAcid information, so custom alphabets can 
            be used in an efficient way </summary>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.AminoAcid.parent">
            <value> The Assembler used to create the AminoAcd, used to get the information of the alphabet. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.AminoAcid.code">
            <value> The code (index of the char in the alpabet array of the parent). </value>
        </member>
        <member name="P:AssemblyNameSpace.Assembler.AminoAcid.Code">
            <value> The code (index of the char in the alpabet array of the parent). Gives only a Get option. 
            The only way to change it is in the creator. </value>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.AminoAcid.#ctor(AssemblyNameSpace.Assembler,System.Char)">
            <summary> The creator of AminoAcids. </summary>
            <param name="asm"> The Assembler that this AminoAcid is used in, to get the alphabet. </param>
            <param name="input"> The character to store in this AminoAcid. </param>
            <returns> Returns a reference to the new AminoAcid. </returns>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.AminoAcid.ToString">
            <summary> Will create a string of this AminoAcid. Consiting of the character used to 
            create this AminoAcid. </summary>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.AminoAcid.ArrayToString(AssemblyNameSpace.Assembler.AminoAcid[])">
            <summary> Will create a string of an array of AminoAcids. </summary>
            <param name="array"> The array to create a string from. </param>
            <returns> Returns the string of the array. </returns>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.AminoAcid.Equals(System.Object)">
            <summary> To check for equality of the AminoAcids. Will return false if the object is not an AminoAcid. </summary>
            <remarks> Implemented as the equals operator (==). </remarks>
            <param name="obj"> The object to check equality with. </param>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.AminoAcid.ArrayEquals(AssemblyNameSpace.Assembler.AminoAcid[],AssemblyNameSpace.Assembler.AminoAcid[])">
            <summary> To check for equality of arrays of AminoAcids. </summary>
            <remarks> Implemented as a shortcircuiting loop with the equals operator (==). </remarks>
            <param name="left"> The first object to check equality with. </param>
            <param name="right"> The second object to check equality with. </param>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.AminoAcid.op_Equality(AssemblyNameSpace.Assembler.AminoAcid,AssemblyNameSpace.Assembler.AminoAcid)">
            <summary> To check for equality of AminoAcids. </summary>
            <remarks> Implemented as a check for equality of the Code of both AminoAcids. </remarks>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.AminoAcid.op_Inequality(AssemblyNameSpace.Assembler.AminoAcid,AssemblyNameSpace.Assembler.AminoAcid)">
            <summary> To check for inequality of AminoAcids. </summary>
            <remarks> Implemented as a a reverse of the equals operator. </remarks>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.AminoAcid.GetHashCode">
            <summary> To get a hashcode for this AminoAcid. </summary>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.AminoAcid.Homology(AssemblyNameSpace.Assembler.AminoAcid)">
            <summary> Calculating homology, using the scoring matrix of the parent Assembler. </summary>
            <remarks> Depending on which rules are put into the scoring matrix the order in which this 
            function is evaluated could differ. <c>a.Homology(b)</c> does not have to be equal to 
            <c>b.Homology(a)</c>. </remarks>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.AminoAcid.ArrayHomology(AssemblyNameSpace.Assembler.AminoAcid[],AssemblyNameSpace.Assembler.AminoAcid[])">
            <summary> Calculating homology between two arrays of AminoAcids, using the scoring matrix 
            of the parent Assembler. </summary>
            <remarks> Two arrays of different length will result in a value of 0. This function loops
            over the AminoAcids and returns the sum of the homology value between those. </remarks>
            <param name="left"> The first object to calculate homology with. </param>
            <param name="right"> The second object to calculate homology with. </param>
        </member>
        <member name="T:AssemblyNameSpace.Assembler.Node">
            <summary> Nodes in the graph with a sequence length of K-1. </summary>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.Node.sequence">
            <value> The member to store the sequence information in. </value>
        </member>
        <member name="P:AssemblyNameSpace.Assembler.Node.Sequence">
            <value> The sequence of the Node. Only has a getter. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.Node.multiplicity">
            <value> The member to store the multiplicity (amount of k-mers which 
            result in the same (k-1)-mers in. </value>
        </member>
        <member name="P:AssemblyNameSpace.Assembler.Node.Multiplicity">
            <value> The multiplicity, amount of k-mers which 
            result in the same (k-1)-mers, of the Node. Only has a getter. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.Node.forwardEdges">
            <value> The list of edges from this Node. The tuples contain the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. The private 
            member to store the list. </value>
        </member>
        <member name="P:AssemblyNameSpace.Assembler.Node.ForwardEdges">
            <value> The list of edges from this Node. The tuples contain the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. Only has a getter. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.Node.backwardEdges">
            <value> The list of edges to this Node. The tuples contain the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. The private 
            member to store the list. </value>
        </member>
        <member name="P:AssemblyNameSpace.Assembler.Node.BackwardEdges">
            <value> The list of edges to this Node. The tuples contain the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. Only has a getter. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.Node.Visited">
            <value> Whether or not this node is visited yet. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.Node.max_forward_score">
            <value> Highest score yet for forward edges, used in filtering only the highest edges. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.Node.max_backward_score">
            <value> Highest score yet for backward edges, used in filtering only the highest edges. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.Node.edge_include_limit">
            <value> The limit to include edges when filtering on highest edges. It will be used to include 
            not only the highest but (depending on the value) a couple more edges. </value>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.Node.#ctor(AssemblyNameSpace.Assembler.AminoAcid[],System.Int32,System.Int32)">
            <summary> The creator of Nodes. </summary>
            <param name="seq"> The sequence of this Node. </param>
            <param name="multi"> The multiplicity of this Node. </param>
            <param name="edge_include_limit_input"> The limit to include edges when filtering. </param>
            <remarks> It will initialize the edges list. </remarks>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.Node.AddForwardEdge(System.Int32,System.Int32,System.Int32)">
            <summary> To add a forward edge to the Node. Wil only be added if the score is high enough. </summary>
            <param name="target"> The index of the Node where this edge goes to. </param>
            <param name="score1"> The homology of the edge with the first Node. </param>
            <param name="score2"> The homology of the edge with the second Node. </param>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.Node.AddBackwardEdge(System.Int32,System.Int32,System.Int32)">
            <summary> To add a backward edge to the Node. </summary>
            <param name="target"> The index of the Node where this edge comes from. </param>
            <param name="score1"> The homology of the edge with the first Node. </param>
            <param name="score2"> The homology of the edge with the second Node. </param>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.Node.HasForwardEdges">
            <summary> To check if the Node has forward edges. </summary>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.Node.HasBackwardEdges">
            <summary> To check if the Node has backward edges. </summary>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.Node.EdgesCount">
            <summary> To get the amount of edges (forward and backward). </summary>
            <remarks> O(1) runtime </remarks>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.Node.MaxForwardEdge">
            <summary> Gets the forward edge with the highest total homology of all 
            edges in this Node. </summary>
            <returns> It returns the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. </returns>
            <exception cref="T:System.Exception"> It will result in an Exception if the Node has no forward edges. </exception>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.Node.MaxBackwardEdge">
            <summary> Gets the backward edge with the highest total homology of all 
            edges in this Node. </summary>
            <returns> It returns the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. </returns>
            <exception cref="T:System.Exception"> It will result in an Exception if the Node has no backward edges. </exception>
        </member>
        <member name="T:AssemblyNameSpace.Assembler.MetaInformation">
            <summary> A struct to hold meta information about the assembly to keep it organised 
            and to report back to the user. </summary>
        </member>
        <member name="T:AssemblyNameSpace.Assembler.CondensedNode">
            <summary> Nodes in the condensed graph with a variable sequence length. </summary>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> The creator, to set up the default values. Also sets the standard alphabet. </summary>
            <param name="kmer_length_input"> The lengths of the k-mers. </param>
            <param name="minimum_homology_input"> The minimum homology needed to be inserted in the graph as an edge. <see cref="P:AssemblyNameSpace.Assembler.Minimum_homology"/> </param>
            <param name="edge_include_limit_input"> The limit to include edges when filtering. </param>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.getIndexInAlphabet(System.Char)">
            <summary> Find the index of the given character in the alphabet. </summary>
            <param name="c"> The character to lot op. </param>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.SetAlphabet(System.Collections.Generic.List{System.ValueTuple{System.Char,System.Char,System.Int32,System.Boolean}},System.Int32,System.String)">
            <summary> Set the alphabet of the assembler. </summary>
            <param name="rules"> A list of rules implemented as tuples containing the chars to connect, 
            the value to put into the matrix and whether or not the rule should be bidirectional (the value
             in the matrix is the same both ways). </param>
            <param name="diagonals_value"> The value to place on the diagonals of the matrix. </param>
            <param name="input"> The alphabet to use, it will be iterated over from the front to the back so
            the best case scenario has the most used characters at the front of the string. </param>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.OpenReads(System.String)">
            <summary> To open a file with reads (should always be run before trying to assemble). 
            It will save the reads in the current Assembler object. </summary>
            <param name="input_file"> The path to the file to read from. </param>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.Assemble">
            <summary> Assemble the reads into the graph, this is logically (one of) the last metods to 
            run on an Assembler, all settings should be defined before running this. </summary>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.OutputReport">
            <summary> Outputs some information about the assembly the help validate the output of the assembly. </summary>
        </member>
        <member name="T:AssemblyNameSpace.HelperFunctionality">
            <summary> A class to store extension methods to help in the process of coding. </summary>
        </member>
        <member name="M:AssemblyNameSpace.HelperFunctionality.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary> To copy a subarray to a new array. </summary>
            <param name="data"> The old array to copy from. </param>
            <param name="index"> The index to start copying. </param>
            <param name="length"> The length of the created subarray. </param>
            <returns> Returns a new array with clones of the original array. </returns>
        </member>
    </members>
</doc>
