<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Main</name>
    </assembly>
    <members>
        <member name="T:AssemblyNameSpace.NamespaceDoc">
            <summary> This is a project to build a piece of software that is able to rebuild a protein sequence
            from reads of a massspectrometer. 
            The software is build by Douwe Schulte and was started on 25-03-2019.
            It is build in collaboration with and under supervision of Joost Snijder,
            from the group "Massspectrometry and Proteomics" at the university of Utrecht. </summary>
        </member>
        <member name="T:AssemblyNameSpace.ToRunWithCommandLine">
            <summary> The main class which is the entry point from the command line </summary>
        </member>
        <member name="M:AssemblyNameSpace.ToRunWithCommandLine.Main">
            <summary> The entry point. </summary>
        </member>
        <member name="T:AssemblyNameSpace.AminoAcid">
            <summary> A struct to function as a wrapper for AminoAcid information, so custom alphabets can 
            be used in an efficient way </summary>
        </member>
        <member name="F:AssemblyNameSpace.AminoAcid.Code">
            <summary> The code (index of the char in the alpabet array of the parent).
            The only way to change it is in the creator. </summary>
            <value> The code of this AminoAcid. </value>
        </member>
        <member name="M:AssemblyNameSpace.AminoAcid.#ctor(System.Char)">
            <summary> The creator of AminoAcids. </summary>
            <param name="input"> The character to store in this AminoAcid. </param>
            <returns> Returns a reference to the new AminoAcid. </returns>
        </member>
        <member name="M:AssemblyNameSpace.AminoAcid.ToString">
            <summary> Will create a string of this AminoAcid. Consiting of the character used to 
            create this AminoAcid. </summary>
            <returns> Returns the character of this AminoAcid (based on the alphabet) as a string. </returns>
        </member>
        <member name="M:AssemblyNameSpace.AminoAcid.ArrayToString(AssemblyNameSpace.AminoAcid[])">
            <summary> Will create a string of an array of AminoAcids. </summary>
            <param name="array"> The array to create a string from. </param>
            <returns> Returns the string of the array. </returns>
        </member>
        <member name="M:AssemblyNameSpace.AminoAcid.Equals(System.Object)">
            <summary> To check for equality of the AminoAcids. Will return false if the object is not an AminoAcid. </summary>
            <remarks> Implemented as the equals operator (==). </remarks>
            <param name="obj"> The object to check equality with. </param>
            <returns> Returns true when the Amino Acids are equal. </returns>
        </member>
        <member name="M:AssemblyNameSpace.AminoAcid.ArrayEquals(AssemblyNameSpace.AminoAcid[],AssemblyNameSpace.AminoAcid[])">
            <summary> To check for equality of arrays of AminoAcids. </summary>
            <remarks> Implemented as a short circuiting loop with the equals operator (==). </remarks>
            <param name="left"> The first object to check equality with. </param>
            <param name="right"> The second object to check equality with. </param>
            <returns> Returns true when the aminoacid arrays are equal. </returns>
        </member>
        <member name="M:AssemblyNameSpace.AminoAcid.op_Equality(AssemblyNameSpace.AminoAcid,AssemblyNameSpace.AminoAcid)">
            <summary> To check for equality of AminoAcids. </summary>
            <remarks> Implemented as a check for equality of the Code of both AminoAcids. </remarks>
            <param name="x"> The first AminoAcid to test. </param>
            <param name="y"> The second AminoAcid to test. </param>
            <returns> Returns true when the Amino Acids are equal. </returns>
        </member>
        <member name="M:AssemblyNameSpace.AminoAcid.op_Inequality(AssemblyNameSpace.AminoAcid,AssemblyNameSpace.AminoAcid)">
            <summary> To check for inequality of AminoAcids. </summary>
            <remarks> Implemented as a a reverse of the equals operator. </remarks>
            <param name="x"> The first AminoAcid to test. </param>
            <param name="y"> The second AminoAcid to test. </param>
            <returns> Returns false when the Amino Acids are equal. </returns>
        </member>
        <member name="M:AssemblyNameSpace.AminoAcid.GetHashCode">
            <summary> To get a hashcode for this AminoAcid. </summary>
            <returns> Returns the hascode of the AminoAcid. </returns>
        </member>
        <member name="M:AssemblyNameSpace.AminoAcid.Homology(AssemblyNameSpace.AminoAcid)">
            <summary> Calculating homology, using the scoring matrix of the parent Assembler. 
            See <see cref="F:AssemblyNameSpace.Alphabet.scoring_matrix"/> for the scoring matrix.
            See <see cref="M:AssemblyNameSpace.Alphabet.SetAlphabet(System.String)"/> on how to change the scoring matrix.</summary>
            <remarks> Depending on which rules are put into the scoring matrix the order in which this 
            function is evaluated could differ. <c>a.Homology(b)</c> does not have to be equal to 
            <c>b.Homology(a)</c>. </remarks>
            <param name="right"> The other AminoAcid to use. </param>
            <returns> Returns the homology score (based on the scoring matrix) of the two AminoAcids. </returns>
        </member>
        <member name="M:AssemblyNameSpace.AminoAcid.ArrayHomology(AssemblyNameSpace.AminoAcid[],AssemblyNameSpace.AminoAcid[])">
            <summary> Calculating homology between two arrays of AminoAcids, using the scoring matrix 
            of the parent Assembler. </summary>
            <remarks> Two arrays of different length will result in a value of 0. This function loops
            over the AminoAcids and returns the sum of the homology value between those. </remarks>
            <param name="left"> The first object to calculate homology with. </param>
            <param name="right"> The second object to calculate homology with. </param>
            <returns> Returns the homology bewteen the two aminoacid arrays. </returns>
        </member>
        <member name="T:AssemblyNameSpace.Node">
            <summary> Nodes in the graph with a sequence length of K-1. </summary>
        </member>
        <member name="F:AssemblyNameSpace.Node.sequence">
            <summary> The member to store the sequence information in. </summary>
        </member>
        <member name="P:AssemblyNameSpace.Node.Sequence">
            <summary> The sequence of the Node. Only has a getter. </summary>
            <value> The sequence of this node. </value>
        </member>
        <member name="F:AssemblyNameSpace.Node.origins">
            <summary> Where the (k-1)-mer sequence comes from. </summary>
        </member>
        <member name="P:AssemblyNameSpace.Node.Origins">
            <summary> The indexes of the reads where this (k-1)-mere originated from. </summary>
            <value> A list of indexes of the list of reads. </value>
        </member>
        <member name="F:AssemblyNameSpace.Node.forwardEdges">
            <summary> The list of edges from this Node. The tuples contain the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. The private 
            member to store the list. </summary>
        </member>
        <member name="P:AssemblyNameSpace.Node.ForwardEdges">
            <summary> The list of edges going from this node. </summary>
            <value> The list of edges from this Node. The tuples contain the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. Only has a getter. </value>
        </member>
        <member name="F:AssemblyNameSpace.Node.backwardEdges">
            <summary> The list of edges to this Node. The tuples contain the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. The private 
            member to store the list. </summary>
        </member>
        <member name="P:AssemblyNameSpace.Node.BackwardEdges">
            <summary> The list of edges going to this node. </summary>
            <value> The list of edges to this Node. The tuples contain the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. Only has a getter. </value>
        </member>
        <member name="F:AssemblyNameSpace.Node.Visited">
            <summary> Whether or not this node is visited yet. </summary>
        </member>
        <member name="M:AssemblyNameSpace.Node.#ctor(AssemblyNameSpace.AminoAcid[],System.Collections.Generic.List{System.Int32})">
            <summary> The creator of Nodes. </summary>
            <param name="seq"> The sequence of this Node. </param>
            <param name="origin"> The origin(s) of this (k-1)-mer. </param>
            <remarks> It will initialize the edges list. </remarks>
        </member>
        <member name="M:AssemblyNameSpace.Node.AddForwardEdge(System.Int32,System.Int32,System.Int32)">
            <summary> To add a forward edge to the Node. Wil only be added if the score is high enough. </summary>
            <param name="target"> The index of the Node where this edge goes to. </param>
            <param name="score1"> The homology of the edge with the first Node. </param>
            <param name="score2"> The homology of the edge with the second Node. </param>
        </member>
        <member name="M:AssemblyNameSpace.Node.AddBackwardEdge(System.Int32,System.Int32,System.Int32)">
            <summary> To add a backward edge to the Node. </summary>
            <param name="target"> The index of the Node where this edge comes from. </param>
            <param name="score1"> The homology of the edge with the first Node. </param>
            <param name="score2"> The homology of the edge with the second Node. </param>
        </member>
        <member name="M:AssemblyNameSpace.Node.HasForwardEdges">
            <summary> To check if the Node has forward edges. </summary>
            <returns> Returns true if the node has forward edges. </returns>
        </member>
        <member name="M:AssemblyNameSpace.Node.HasBackwardEdges">
            <summary> To check if the Node has backward edges. </summary>
            <returns> Returns true if the node has backward edges. </returns>
        </member>
        <member name="M:AssemblyNameSpace.Node.EdgesCount">
            <summary> To get the amount of edges (forward and backward). </summary>
            <remarks> O(1) runtime </remarks>
            <returns> The amount of edges (forwards and backwards). </returns>
        </member>
        <member name="T:AssemblyNameSpace.MetaInformation">
            <summary> A struct to hold meta information about the assembly to keep it organised 
            and to report back to the user. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.total_time">
            <summary> The total time needed to run Assemble(). See <see cref="M:AssemblyNameSpace.Assembler.Assemble"/></summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.pre_time">
            <summary> The needed to do the pre work, creating k-mers and (k-1)-mers. See <see cref="M:AssemblyNameSpace.Assembler.Assemble"/></summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.graph_time">
            <summary> The time needed the build the graph. See <see cref="M:AssemblyNameSpace.Assembler.Assemble"/></summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.path_time">
            <summary> The time needed to find the path through the de Bruijn graph. See <see cref="M:AssemblyNameSpace.Assembler.Assemble"/></summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.sequence_filter_time">
            <summary> The time needed to filter the sequences. See <see cref="M:AssemblyNameSpace.Assembler.Assemble"/></summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.drawingtime">
            <summary> The time needed to draw the graphs.</summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.reads">
            <summary> The amount of reads used by the program. See <see cref="M:AssemblyNameSpace.Assembler.Assemble"/>.</summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.kmers">
            <summary> The amount of k-mers generated. See <see cref="M:AssemblyNameSpace.Assembler.Assemble"/></summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.kmin1_mers">
            <summary> The amount of (k-1)-mers generated. See <see cref="M:AssemblyNameSpace.Assembler.Assemble"/></summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.kmin1_mers_raw">
            <summary> The amount of (k-1)-mers generated, before removing all duplicates. See <see cref="M:AssemblyNameSpace.Assembler.Assemble"/></summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.sequences">
            <summary> The number of sequences found. See <see cref="M:AssemblyNameSpace.Assembler.Assemble"/></summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.kmer_length">
            <summary>
            The length of the k-mers
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaInformation.minimum_homology">
            <summary>
            The minimum homology score used
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.CondensedNode">
            <summary> Nodes in the condensed graph with a variable sequence length. </summary>
        </member>
        <member name="F:AssemblyNameSpace.CondensedNode.Index">
            <summary> The index this node. The index is defined as the index of the startnode in the adjecency list of the de Bruijn graph. </summary>
        </member>
        <member name="F:AssemblyNameSpace.CondensedNode.ForwardIndex">
            <summary> The index of the last node (going from back to forth). To buid the condensed graph with indexes in the condensed graph instead of the de Bruijn graph in the edges lists. </summary>
        </member>
        <member name="F:AssemblyNameSpace.CondensedNode.BackwardIndex">
            <summary> The index of the first node (going from back to forth). To buid the condensed graph with indexes in the condensed graph instead of the de Bruijn graph in the edges lists. </summary>
        </member>
        <member name="F:AssemblyNameSpace.CondensedNode.Visited">
            <summary> Whether or not this node is visited yet. </summary>
        </member>
        <member name="F:AssemblyNameSpace.CondensedNode.Sequence">
            <summary> The sequence of this node. It is the longest constant sequence to be 
            found in the de Bruijn graph starting at the Index. See <see cref="F:AssemblyNameSpace.CondensedNode.Index"/></summary>
        </member>
        <member name="F:AssemblyNameSpace.CondensedNode.Prefix">
            <summary>
            The possible prefix sequence before the sequence, trimmed off in creating the condensed graph
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.CondensedNode.Suffix">
            <summary>
            The possible suffix sequence after the sequence, trimmed off in creating the condensed graph
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.CondensedNode.ForwardEdges">
            <summary> The list of forward edges, defined as the indexes in the de Bruijn graph. </summary>
        </member>
        <member name="F:AssemblyNameSpace.CondensedNode.BackwardEdges">
            <summary> The list of backward edges, defined as the indexes in the de Bruijn graph. </summary>
        </member>
        <member name="F:AssemblyNameSpace.CondensedNode.Origins">
            <summary> The origins where the (k-1)-mers used for this sequence come from. Defined as the index in the list with reads. </summary>
        </member>
        <member name="M:AssemblyNameSpace.CondensedNode.#ctor(System.Collections.Generic.List{AssemblyNameSpace.AminoAcid},System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary> Creates a condensed node to be used in the condensed graph. </summary>
            <param name="sequence"> The sequence of this node. See <see cref="F:AssemblyNameSpace.CondensedNode.Sequence"/></param>
            <param name="index"> The index of the node, the index in the de Bruijn graph. See <see cref="F:AssemblyNameSpace.CondensedNode.Index"/></param>
            <param name="forward_index"> The index of the last node of the sequence (going from back to forth). See <see cref="F:AssemblyNameSpace.CondensedNode.ForwardIndex"/></param>
            <param name="backward_index"> The index of the first node of the sequence (going from back to forth). See <see cref="F:AssemblyNameSpace.CondensedNode.BackwardIndex"/></param>
            <param name="forward_edges"> The forward edges from this node (indexes). See <see cref="F:AssemblyNameSpace.CondensedNode.ForwardEdges"/></param>
            <param name="backward_edges"> The backward edges from this node (indexes). See <see cref="F:AssemblyNameSpace.CondensedNode.BackwardEdges"/></param>
            <param name="origins"> The origins where the (k-1)-mers used for this sequence come from. See <see cref="F:AssemblyNameSpace.CondensedNode.Origins"/></param>
        </member>
        <member name="F:AssemblyNameSpace.Alphabet.scoring_matrix">
            <summary> The matrix used for scoring of the alignment between two characters in the alphabet. 
            As such this matrix is rectangular. </summary>
        </member>
        <member name="F:AssemblyNameSpace.Alphabet.alphabet">
            <summary> The alphabet used for alignment. The default value is all the amino acids in order of
            natural abundance in prokaryotes to make finding the right amino acid a little bit faster. </summary>
        </member>
        <member name="M:AssemblyNameSpace.Alphabet.getIndexInAlphabet(System.Char)">
            <summary> Find the index of the given character in the alphabet. </summary>
            <param name="c"> The character to look up. </param>
            <returns> The index of the character in the alphabet or -1 if it is not in the alphabet. </returns>
        </member>
        <member name="M:AssemblyNameSpace.Alphabet.SetAlphabet(System.Collections.Generic.List{System.ValueTuple{System.Char,System.Char,System.Int32,System.Boolean}},System.Int32,System.String)">
            <summary> Set the alphabet of the assembler. </summary>
            <param name="rules"> A list of rules implemented as tuples containing the chars to connect, 
            the value to put into the matrix and whether or not the rule should be bidirectional (the value
             in the matrix is the same both ways). </param>
            <param name="diagonals_value"> The value to place on the diagonals of the matrix. </param>
            <param name="input"> The alphabet to use, it will be iterated over from the front to the back so
            the best case scenario has the most used characters at the front of the string. </param>
        </member>
        <member name="M:AssemblyNameSpace.Alphabet.SetAlphabet(System.String)">
            <summary> Set the alphabet based on a CSV file. </summary>
            <param name="filename"> Name of the file. </param>
        </member>
        <member name="M:AssemblyNameSpace.Alphabet.SetAlphabetData(System.String)">
            <summary> Set the alphabet based on data in csv format. </summary>
            <param name="data"> The csv data. </param>
        </member>
        <member name="T:AssemblyNameSpace.HelperFunctionality">
            <summary> A class to store extension methods to help in the process of coding. </summary>
        </member>
        <member name="M:AssemblyNameSpace.HelperFunctionality.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary> To copy a subarray to a new array. </summary>
            <param name="data"> The old array to copy from. </param>
            <param name="index"> The index to start copying. </param>
            <param name="length"> The length of the created subarray. </param>
            <typeparam name="T"> The type of the elements in the array. </typeparam>
            <returns> Returns a new array with clones of the original array. </returns>
        </member>
        <member name="M:AssemblyNameSpace.HelperFunctionality.MultipleSequenceAlignmentToTemplate(System.String,System.String[])">
            <summary> This aligns a list of sequences to a template sequence based on character identity. </summary>
            <returns> Returns a ValueTuple with the coverage as the first item (as a Double) and the amount of 
            correctly aligned reads as an Int as the second item. </returns>
            <remark> This code does not account for small defects in reads, it will only align perfect matches 
            and it will only align matches tha fit entirely inside the template sequence (no overhang at the start or end). </remark>
            <param name="template"> The template to match against. </param>
            <param name="sequences"> The sequences to match with. </param>
        </member>
        <member name="M:AssemblyNameSpace.HelperFunctionality.MultipleSequenceAlignmentToTemplateExtended(System.String,System.String[])">
            <summary> This aligns a list of sequences to a template sequence based on character identity. </summary>
            <returns> Returns a ValueTuple with the coverage as the first item (as a Double) and the  
            correctly aligned reads as an array as the second item and the depth of coverage as the third item. </returns>
            <remark> This code does not account for small defects in reads, it will only align perfect matches 
            and it will only align matches tha fit entirely inside the template sequence (no overhang at the start or end). </remark>
            <param name="template"> The template to match against. </param>
            <param name="sequences"> The sequences to match with. </param>
        </member>
        <member name="M:AssemblyNameSpace.HelperFunctionality.MultipleSequenceAlignmentToTemplate(System.String,System.Collections.Generic.List{System.ValueTuple{System.String,System.Int32}},System.Boolean)">
            <summary> This aligns a list of sequences to a template sequence based on the alphabet. </summary>
            <returns> Returns a list of tuples with the sequences as first item, startinposition as second item, 
            end position as third item and identifier from the given list as fourth item. </returns>
            <remark> This code does not account for small defects in reads, it will only align perfect matches 
            and it will only align matches tha fit entirely inside the template sequence (no overhang at the start or end). </remark>
            <param name="template"> The template to match against. </param>
            <param name="sequences"> The sequences to match with. </param>
            <param name="reverse"> Whether or not the alignment should also be done in reverse direction. </param>
        </member>
        <member name="T:AssemblyNameSpace.Report">
            <summary>
            To be a basepoint for any reporting options, handling all the metadata.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.Report.condensed_graph">
            <summary>
            The condensed graph.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.Report.graph">
            <summary>
            The noncondesed graph.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.Report.meta_data">
            <summary>
            The metadata of the run.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.Report.reads">
            <summary>
            The reads used as input in the run.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.Report.reads_metadata">
            <summary>
            Possebly the reads from PEAKS used in the run.
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.Report.#ctor(System.Collections.Generic.List{AssemblyNameSpace.CondensedNode},AssemblyNameSpace.Node[],AssemblyNameSpace.MetaInformation,System.Collections.Generic.List{AssemblyNameSpace.AminoAcid[]},System.Collections.Generic.List{AssemblyNameSpace.MetaData.IMetaData})">
            <summary>
            To create a report, gets all metadata.
            </summary>
            <param name="condensed_graph_input">The condesed graph.</param>
            <param name="graph_input">The noncondesed graph.</param>
            <param name="meta_data_input">The metadata.</param>
            <param name="reads_input">The reads.</param>
            <param name="reads_metadata_input">The MetaData of the reads.</param>
        </member>
        <member name="M:AssemblyNameSpace.Report.Create">
            <summary>
            Creates a report, has to be implemented by all reports.
            </summary>
            <returns>A string containing the report.</returns>
        </member>
        <member name="M:AssemblyNameSpace.Report.Save(System.String)">
            <summary>
            Saves the Report cretaed with Create to a file.
            </summary>
            <param name="filename">The path to save the to.</param>
        </member>
        <member name="T:AssemblyNameSpace.HTMLReport">
            <summary>
            An HTML report
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.HTMLReport.UseIncludedDotDistribution">
            <summary>
            Indicates if the program should use the included Dot (graphviz) distribution.
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.HTMLReport.#ctor(System.Collections.Generic.List{AssemblyNameSpace.CondensedNode},AssemblyNameSpace.Node[],AssemblyNameSpace.MetaInformation,System.Collections.Generic.List{AssemblyNameSpace.AminoAcid[]},System.Collections.Generic.List{AssemblyNameSpace.MetaData.IMetaData},System.Boolean)">
            <summary>
            To retrieve all metadata
            </summary>
            <param name="condensed_graph_input">The condesed graph.</param>
            <param name="graph_input">The noncondensed graph.</param>
            <param name="meta_data_input">The metadata.</param>
            <param name="reads_input">The reads.</param>
            <param name="reads_metadata">MetaData of the reads.</param>
            <param name="useincludeddotdistribution">Indicates if the program should use the included Dot (graphviz) distribution.</param>
        </member>
        <member name="M:AssemblyNameSpace.HTMLReport.CreateGraph">
            <summary> Creates a dot file and uses it in graphviz to generate a nice plot. Generates an extended and a simple variant. </summary>
        </member>
        <member name="M:AssemblyNameSpace.HTMLReport.CreateReadsTable">
            <summary> Create HTML with all reads in a table. With annotations for sorting the table. </summary>
            <returns> Returns an HTML string. </returns>
        </member>
        <member name="M:AssemblyNameSpace.HTMLReport.CreateContigsTable">
            <summary> Returns a table containing all the contigs of a alignment. </summary>
            <returns> A string containing valid HTML ready to paste into an HTML file. </returns>
        </member>
        <member name="M:AssemblyNameSpace.HTMLReport.CreateAsides">
            <summary> Returns a list of asides for details viewing. </summary>
            <returns> A string containing valid HTML ready to paste into an HTML file. </returns>
        </member>
        <member name="M:AssemblyNameSpace.HTMLReport.CreateReadsAlignment(AssemblyNameSpace.CondensedNode)">
            <summary> Create a reads alignment to display in the sidebar. </summary>
            <returns> Returns an HTML string. </returns>
        </member>
        <member name="M:AssemblyNameSpace.HTMLReport.GetCondensedNodeLink(System.Int32)">
            <summary> Returns the string representation of the human friendly identifier of a node. </summary>
            <param name="index"> The index in the condensed graph of the condensed node. </param>
            <returns> A string to be used where humans can see it. </returns>
        </member>
        <member name="M:AssemblyNameSpace.HTMLReport.GetReadLink(System.Int32)">
            <summary> Returns the string representation of the human friendly identifier of a read. </summary>
            <param name="index"> The index in the readslist. </param>
            <returns> A string to be used where humans can see it. </returns>
        </member>
        <member name="M:AssemblyNameSpace.HTMLReport.MetaInformation">
            <summary> Returns some meta information about the assembly the help validate the output of the assembly. </summary>
            <returns> A string containing valid HTML ready to paste into an HTML file. </returns>
        </member>
        <member name="M:AssemblyNameSpace.HTMLReport.Create">
            <summary> Creates an HTML report to view the results and metadata. </summary>
        </member>
        <member name="M:AssemblyNameSpace.CSVReport.PrepareCSVFile(System.String)">
            <summary>
            Prepares the file to be used for a CSV report
            </summary>
            <param name="filename">The path to the file</param>
        </member>
        <member name="F:AssemblyNameSpace.CSVReport.CSVKey">
            <summary>
            The key to get acces to write to the CSV file
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.CSVReport.CreateCSVLine(System.String,System.String)">
            <summary> Fill metainformation in a CSV line and append it to the given file. </summary>
            <param name="ID">ID of the run to recognise it in the CSV file. </param>
            <param name="filename"> The file to which to append the CSV line to. </param>
        </member>
        <member name="M:AssemblyNameSpace.FASTAReport.Create">
            <summary>
            Creates a FATSA file with a score for each path through the graph. The lines will be sorted and the lines can be filtered for a minimal score.
            </summary>
            <returns>A string containing the file.</returns>
        </member>
        <member name="M:AssemblyNameSpace.FASTAReport.GetPaths(System.Int32,System.String,System.Int32,System.Collections.Generic.List{System.ValueTuple{System.Int32,System.String}},System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets all paths starting from the given node.
            </summary>
            <param name="node_index">The node to start from</param>
            <param name="currentpath">The sequences up to the start node</param>
            <param name="currentscore">The score up to the start node</param>
            <param name="output">The list containing all lines, here the output of the function will be aggregated</param>
            <param name="indices">The list of all indices of the path up to the start node</param>
            <returns>Nothing, see output for the output</returns>
        </member>
        <member name="M:AssemblyNameSpace.FASTAReport.CalculateScore(AssemblyNameSpace.CondensedNode)">
            <summary> Create a reads alignment and calculates depth of coverage. </summary>
            <param name="node">The node to calculate the score of</param>
            <returns> Returns a score per base. </returns>
        </member>
        <member name="T:AssemblyNameSpace.OpenReads">
            <summary>
            To contain all logic for the reading of reads out of files.
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.OpenReads.Simple(AssemblyNameSpace.MetaData.FileIdentifier,System.Char)">
            <summary> To open a file with reads. It assumes a very basic format,
            namely sequences separated with whitespace (space, tab or newline)
            with the possibility to specify comments as lines starting with a 
            specific character (standard '#').  </summary>
            <param name="input_file"> The file to read from. </param>
            <param name="comment_char"> The character comment lines start with. </param>
            <returns> A list of all reads found. </returns>
        </member>
        <member name="M:AssemblyNameSpace.OpenReads.Fasta(AssemblyNameSpace.MetaData.FileIdentifier)">
            <summary> To open a file with reads. the file should be in fasta format
            so identifiers on a single line starting with '>' followed by an arbitrary
            number of lines with sequences. Because sometimes programs output the length
            of a line after every line this is stripped away.  </summary>
            <param name="input_file"> The path to the file to read from. </param>
            <returns> A list of all reads found with their identifiers. </returns>
        </member>
        <member name="M:AssemblyNameSpace.OpenReads.Peaks(AssemblyNameSpace.MetaData.FileIdentifier,System.Int32,System.Int32,AssemblyNameSpace.FileFormat.Peaks,System.Int32,System.Char,System.Char)">
            <summary> Open a PEAKS CSV file and save the reads to be used in assembly. </summary>
            <param name="input_file"> Path to the CSV file. </param>
            <param name="cutoffscore"> Score used to filter peptides, lower will be discarded. </param>
            <param name="localcutoffscore"> Score used to filter patches in peptides 
            with high enough confidence to be used contrary their low gloabl confidence,
            lower will be discarded. </param>
            <param name="peaksformat"> The peaksformat to use, this depends on the 
            version of peaks used to generate the CSV's. </param>
            <param name="min_length_patch"> The minimal length of a patch. </param>
            <param name="separator"> CSV separator used. </param>
            <param name="decimalseparator"> Separator used in decimals. </param>
            <returns> A list of all reads found with their metadata. </returns>
        </member>
        <member name="T:AssemblyNameSpace.MetaData">
            <summary>
            A class to hold all metadata handling in one place.
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.MetaData.IMetaData">
            <summary>
            The interface which proper metadata instances should implement.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.IMetaData.File">
            <summary>
            The Identifier of the originating file
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.IMetaData.ToHTML">
            <summary>
            To generate (an) HTML element(s) from this MetaData
            </summary>
            <returns>A string containing the MetaData</returns>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.IMetaData.#ctor(AssemblyNameSpace.MetaData.FileIdentifier)">
            <summary>
            To create an instance
            </summary>
            <param name="file">The identifier of the originating file</param>
        </member>
        <member name="T:AssemblyNameSpace.MetaData.None">
            <summary>
            A metadata instance to contain no metadata so reads without metadata can also be handeled.
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.None.#ctor(AssemblyNameSpace.MetaData.FileIdentifier)">
            <summary>
            Create a new None MetaData
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.None.ToHTML">
            <summary>
            Returns None MetaData to HTML (which is always "")
            </summary>
            <returns>""</returns>
        </member>
        <member name="T:AssemblyNameSpace.MetaData.Fasta">
            <summary> A struct to hold metainformation from fasta data. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Fasta.Identifier">
            <summary>
            The identifier from the fasta file.
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.Fasta.#ctor(System.String,AssemblyNameSpace.MetaData.FileIdentifier)">
            <summary>
            To create a new metadata instance with this metadata.
            </summary>
            <param name="identifier">The fasta identifier.</param>
            <param name="file">The originating file.</param>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.Fasta.ToHTML">
            <summary> Generate HTML with all metainformation from the fasta data. </summary>
            <returns> Returns an HTML string with the metainformation. </returns>
        </member>
        <member name="T:AssemblyNameSpace.MetaData.Peaks">
            <summary> A struct to hold metainformation from PEAKS data. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Fraction">
            <summary> The Fraction number of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Source_File">
            <summary> The source file out of wich the peptide was generated. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Feature">
            <summary> The feature of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.ScanID">
            <summary> The scan identifier of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Original_tag">
            <summary> The sequence with modifications of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Cleaned_sequence">
            <summary> The sequence without modifications of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Confidence">
            <summary> The confidence score of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Mass_over_charge">
            <summary> m/z of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Charge">
            <summary> z of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Retention_time">
            <summary> Retention time of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Area">
            <summary> Area of the peak of the peptide.</summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Mass">
            <summary> Mass of the peptide.</summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Parts_per_million">
            <summary> PPM of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Post_translational_modifications">
            <summary> Posttranslational Modifications of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Local_confidence">
            <summary> Local confidence scores of the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Fragmentation_mode">
            <summary> Fragmentation mode used to generate the peptide. </summary>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.Peaks.Other_scans">
            <summary> Other scans giving the same sequence. </summary>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.Peaks.#ctor(System.String,System.Char,System.Char,AssemblyNameSpace.FileFormat.Peaks,AssemblyNameSpace.MetaData.FileIdentifier)">
            <summary> Create a PeaksMeta struct based on a CSV line in PEAKS format. </summary>
            <param name="line"> The CSV line to parse. </param>
            <param name="separator"> The separator used in CSV. </param>
            <param name="decimalseparator"> The separator used in decimals. </param>
            <param name="pf">FileFormat of the PEAKS file</param>
            <param name="file">Identifier for the originating file</param>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.Peaks.ToHTML">
            <summary> Generate HTML with all metainformation from the PEAKS data. </summary>
            <returns> Returns an HTML string with the metainformation. </returns>
        </member>
        <member name="T:AssemblyNameSpace.MetaData.FileIdentifier">
            <summary>
            A identifier for a file, to hold information about where reads originate from.
            </summary>
        </member>
        <member name="P:AssemblyNameSpace.MetaData.FileIdentifier.Path">
            <value>The absolute path to the file</value>
        </member>
        <member name="F:AssemblyNameSpace.MetaData.FileIdentifier.Name">
            <value>The name or identifier given to the file</value>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.FileIdentifier.#ctor(System.String,System.String)">
            <summary>
            Creating a new FileIdentifier
            </summary>
            <param name="path_input">The path to the file, can be a relative path</param>
            <param name="name">The identifier given to the file</param>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.FileIdentifier.#ctor">
            <summary>
            To create a blank instance of FileIdentifier
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.MetaData.FileIdentifier.ToHTML">
            <summary>
            To generate HTML for use in the metadata sidebar in the HTML report
            </summary>
            <returns>A string containing the HTML</returns>
        </member>
        <member name="T:AssemblyNameSpace.FileFormat">
            <summary>
            To contain definitions for file formats
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.FileFormat.Peaks">
            <summary>
            To contain all options for PEAKS file formats
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.fraction">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.source_file">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.feature">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.scan">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.peptide">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.tag_length">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.alc">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.length">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.mz">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.z">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.rt">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.area">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.mass">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.ppm">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.ptm">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.local_confidence">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.tag">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.FileFormat.Peaks.mode">
            <summary>
            The position of this column in this peaks file format version.
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.FileFormat.Peaks.OldFormat">
            <summary>
            An older version of a PEAKS export
            </summary>
            <returns>The fileformat</returns>
        </member>
        <member name="M:AssemblyNameSpace.FileFormat.Peaks.NewFormat">
            <summary>
            A newer version of a PEAKS export
            </summary>
            <returns>The fileformat</returns>
        </member>
        <member name="M:AssemblyNameSpace.FileFormat.Peaks.CustomFormat(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            An custom version of a PEAKS fileformat 
            </summary>
            <returns>The fileformat</returns>
        </member>
        <member name="T:AssemblyNameSpace.Assembler">
            <summary> The Class with all code to assemble Peptide sequences. </summary>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.reads">
            <summary> The reads fed into the Assembler, as opened by OpenReads. </summary>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.reads_metadata">
            <summary> The meta information as delivered by PEAKS. By definition every index in this list matches 
            with the index in reads. When the data was not imported via PEAKS this list is null.</summary>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.graph">
            <summary> The De Bruijn graph used by the Assembler. </summary>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.condensed_graph">
            <summary> The condensed graph used to store the output of the assembly. </summary>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.kmer_length">
            <summary> The length of the k-mers used to create the De Bruijn graph. Private member where it is stored. </summary>
        </member>
        <member name="P:AssemblyNameSpace.Assembler.Kmer_length">
            <summary> The length of the k-mers used to create the De Bruijn graph. Get and Set is public. </summary>
            <value> The length of the k-mers. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.minimum_homology">
            <summary> The private member to store the minimum homology value in. </summary>
        </member>
        <member name="P:AssemblyNameSpace.Assembler.Minimum_homology">
            <summary> The minimum homology value of an edge to include it in the graph. Lowering the limit 
            could result in a longer sequence retrieved from the algorithm but would also greatly increase
            the computational cost of the calculation. </summary>
            <value> The minimum homology before including an edge in the graph. </value>
        </member>
        <member name="F:AssemblyNameSpace.Assembler.meta_data">
            <summary> To contain meta information about how the program ran to make informed decisions on 
            how to choose the values of variables and to aid in debugging. </summary>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> The creator, to set up the default values. Also sets the standard alphabet. </summary>
            <param name="kmer_length_input"> The lengths of the k-mers. </param>
            <param name="minimum_homology_input"> The minimum homology needed to be inserted in the graph as an edge. <see cref="P:AssemblyNameSpace.Assembler.Minimum_homology"/> </param>
            <param name="duplicate_threshold_input"> The minimum homology score between two reads needed to be viewed as duplicates.</param>
            <param name="should_reverse"> To indicate if the assembler should inlcude all reads in reverse or not.</param>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.GiveReads(System.Collections.Generic.List{System.ValueTuple{System.String,AssemblyNameSpace.MetaData.IMetaData}})">
            <summary>
            Give a list of reads to the assembler
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.StringToSequence(System.String)">
            <summary>
            Gets the sequence in AminoAcids from a string
            </summary>
            <param name="input">The input string</param>
            <returns>The sequence in AminoAcids</returns>
        </member>
        <member name="M:AssemblyNameSpace.Assembler.Assemble">
            <summary> Assemble the reads into the graph, this is logically (one of) the last metods to 
            run on an Assembler, all settings should be defined before running this. </summary>
        </member>
        <member name="T:AssemblyNameSpace.ParseCommandFile">
            <summary>
            A class with options to parse a batch file.
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.Batch(System.String)">
            <summary>
            Parses a batch file and retrieves the runparameters.
            </summary>
            <param name="path">The path to the batch file.</param>
            <returns>The runparameters as specified in the file.</returns>
        </member>
        <member name="T:AssemblyNameSpace.ParseCommandFile.ParseHelper">
            <summary>
            A class with helper functionality for parsing
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.ParseHelper.SkipLine(System.String@)">
            <summary>
            Consumes a whole line of the string
            </summary>
            <param name="content">The string</param>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.ParseHelper.Name(System.String@)">
            <summary>
            Consumes a name from the start of the string
            </summary>
            <param name="content">The string</param>
            <returns>The name</returns>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.ParseHelper.Value(System.String@)">
            <summary>
            Consumes a value from the start of the string
            </summary>
            <param name="content">The string</param>
            <returns>The value</returns>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.ParseHelper.UntilSequence(System.String@,System.String)">
            <summary>
            Consumes the string until it find the sequence
            </summary>
            <param name="content">The string</param>
            <param name="sequence">The sequence to find</param>
            <returns>The consumed part of the string</returns>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.ParseHelper.ConvertToInt(System.String,System.String)">
            <summary>
            Converts a string to an int, while it generates meaningfull error messages for the end user.
            </summary>
            <param name="input">The string to be converted to an int.</param>
            <param name="origin">The place where the string originates from, to be included in error messages.</param>
            <returns>If succesfull: the number (int32)</returns>
        </member>
        <member name="T:AssemblyNameSpace.ParseCommandFile.KeyValue">
            <summary>
            A class to save key value trees
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.ParseCommandFile.KeyValue.Name">
            <summary>
            The name of a key
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.ParseCommandFile.KeyValue.Value">
            <summary>
            The value for this key
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.KeyValue.#ctor(System.String,System.String)">
            <summary>
            Create a new single valued key
            </summary>
            <param name="name">The name of the key</param>
            <param name="value">The value of the key</param>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.KeyValue.#ctor(System.String,System.Collections.Generic.List{AssemblyNameSpace.ParseCommandFile.KeyValue})">
            <summary>
            Create a new multiple valued key
            </summary>
            <param name="name">The name of the key</param>
            <param name="values">The list of KeyValue tree(s) that are the value of this key.</param>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.KeyValue.GetValue">
            <summary>
            Tries to get a single value from this key, otherwise fails with an error message for the end user
            </summary>
            <returns>The value of the KeyValue</returns>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.KeyValue.GetValues">
            <summary>
            Tries to get tha values from this key, only succeeds if this KeyValue is multiple valued, otherwise fails with an error message for the end user
            </summary>
            <returns>The values of this KeyValue</returns>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.KeyValue.IsSingle">
            <summary>
            To test if this is a single valued KeyValue
            </summary>
            <returns>A bool indicating that.</returns>
        </member>
        <member name="T:AssemblyNameSpace.ParseCommandFile.KeyValue.ValueType">
            <summary>
            An abstract class to represent possible values for a KeyValue
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.ParseCommandFile.KeyValue.Single">
            <summary>
            A ValueType for a single valued KeyValue
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.ParseCommandFile.KeyValue.Single.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.KeyValue.Single.#ctor(System.String)">
            <summary>
            To create a single value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="T:AssemblyNameSpace.ParseCommandFile.KeyValue.Multiple">
            <summary>
            A ValueType to contain mulitple values
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.ParseCommandFile.KeyValue.Multiple.Values">
            <summary>
            The list of values
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.ParseCommandFile.KeyValue.Multiple.#ctor(System.Collections.Generic.List{AssemblyNameSpace.ParseCommandFile.KeyValue})">
            <summary>
            To create a multiple value
            </summary>
            <param name="values">The values</param>
        </member>
        <member name="T:AssemblyNameSpace.ParseException">
            <summary>
            An exception to indicate some error while parsing the batch file
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.ParseException.#ctor(System.String)">
            <summary>
            To create a ParseException
            </summary>
            <param name="msg">The message for this Exception</param>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.FullRunParameters">
            <summary>
            To give an 'api' for calling the program
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.FullRunParameters.Runname">
            <summary>
            The name of this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.FullRunParameters.Runtype">
            <summary>
            The type of this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.FullRunParameters.DataParameters">
            <summary>
            The inputs for this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.FullRunParameters.K">
            <summary>
            The K or values of K for this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.FullRunParameters.Reverse">
            <summary>
            The value of Reverse for this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.FullRunParameters.MinimalHomology">
            <summary>
            The value for the MinimalHomology
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.FullRunParameters.DuplicateThreshold">
            <summary>
            The value for the duplicatethreshold
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.FullRunParameters.Alphabet">
            <summary>
            The alphabet(s) to be used in this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.FullRunParameters.Report">
            <summary>
            The report(s) to be generated for this run
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.FullRunParameters.#ctor">
            <summary>
            A blank instance for the RunParameters with defaults and initialization
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.FullRunParameters.CreateRuns">
            <summary>
            Creates a list of all single runs contained in this run.abstract TO be ran in parrallel.
            </summary>
            <returns>All single runs</returns>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.RuntypeValue">
            <summary>
            To dictate how this run should behave.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.RuntypeValue.Separate">
            <summary>
            Dictates that all input files should be run seperate from each other.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.RuntypeValue.Group">
            <summary>
            Dictates that all input files should be run in one group, with all information aggregated.
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.Input">
            <summary>
            To contain parameters for the input of data
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.Input.Parameter">
            <summary>
            A parameter to save an input file.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.Input.Parameter.File">
            <summary>
            The identifier of the file
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.Input.Parameter.#ctor">
            <summary>
            Creates a blank file indetifier
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.Input.Peaks">
            <summary>
            A dataparameter for PEAKS input files
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.Input.Peaks.Cutoffscore">
            <summary>
            The cutoffscore 
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.Input.Peaks.LocalCutoffscore">
            <summary>
            The cuttoffscore for patches
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.Input.Peaks.FileFormat">
            <summary>
            The file format of the PEAKS file
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.Input.Peaks.MinLengthPatch">
            <summary>
            The minimal length of a patch
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.Input.Peaks.Separator">
            <summary>
            The separator used in CSV
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.Input.Peaks.DecimalSeparator">
            <summary>
            The decimal separator used
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.Input.Peaks.#ctor">
            <summary>
            Fills in the default values
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.Input.Reads">
            <summary>
            A parameter for simple reads files
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.Input.Reads.#ctor">
            <summary>
            Fills in default values
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.Input.FASTA">
            <summary>
            A parameter for FASTA reads files
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.Input.FASTA.#ctor">
            <summary>
            Fills in default values
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.K">
            <summary>
            To contain options for values of K
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.K.KValue">
            <summary>
            A value for K
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.K.Single">
            <summary>
            A single value for K
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.K.Single.Value">
            <summary>
            The value of K
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.K.Single.#ctor(System.Int32)">
            <summary>
            Sets the value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.K.Multiple">
            <summary>
            Multiple values for K, will be run in different SingleRuns
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.K.Multiple.Values">
            <summary>
            The values
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.K.Multiple.#ctor(System.Int32[])">
            <summary>
            Sets the values
            </summary>
            <param name="values">The values</param>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.K.Range">
            <summary>
            A range of values for K, will be run in different SingleRuns
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.K.Range.Start">
            <summary>
            The start of the range (included)
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.K.Range.End">
            <summary>
            The end of the range (if an integral amount of steps from the start it is included)
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.K.Range.Step">
            <summary>
            The size of the steps, default is 1
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.K.Range.#ctor">
            <summary>
            Sets the default stepsize
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.ReverseValue">
            <summary>
            The possible values for Reverse
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.ReverseValue.True">
            <summary>
            Turns on Reverse
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.ReverseValue.False">
            <summary>
            Turns off reverse
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.ReverseValue.Both">
            <summary>
            Runs both with and without Reverse in different SingleRuns
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.KArithmatic">
            <summary>
            A value possebly based on the value of K
            </summary>
        </member>
        <member name="P:AssemblyNameSpace.RunParameters.KArithmatic.Value">
            <summary>
            Shows a maximal bracketed version of the expression
            </summary>
            <returns>The expression</returns>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.KArithmatic.expression">
            <summary>
            The expression
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.GetValue(System.Int32)">
            <summary>
            To retrieve the value of the expression, given this value of K
            </summary>
            <param name="k">The value of K</param>
            <returns>The value of the expression</returns>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.#ctor(System.String)">
            <summary>
            To generate a KArithmatic, parses the given string immediatly to be sure to be error free if it succeeds.
            </summary>
            <param name="value">The expression</param>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic">
            <summary>
            To contain Arithmatic stuffs
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Expression">
            <summary>
            A general class for expressions
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Expression.Solve(System.Int32)">
            <summary>
            Solves the expression
            </summary>
            <param name="k">The value of K</param>
            <returns>The value of the expression</returns>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Expression.Show">
            <summary>
            Creates a maximal bracketed version of the expression
            </summary>
            <returns>This expression in string form</returns>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Operator">
            <summary>
            An expression with an operator
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Operator.type">
            <summary>
            The operator
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Operator.left">
            <summary>
            The left hand side
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Operator.right">
            <summary>
            The right hand side
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Operator.#ctor(AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.OpType,AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Expression,AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Expression)">
            <summary>
            Creates an operator expression
            </summary>
            <param name="type_input">The operator</param>
            <param name="lhs">The left hand side</param>
            <param name="rhs">The right hand side</param>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Operator.Solve(System.Int32)">
            <summary>
            Solves the expression
            </summary>
            <param name="k">The value of K</param>
            <returns>The value of the expression</returns>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Operator.Show">
            <summary>
            Creates a maximal bracketed version of the expression
            </summary>
            <returns>This expression in string form</returns>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.OpType">
            <summary>
            The possible operators
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.OpType.Minus">
            <summary> - </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.OpType.Add">
            <summary> + </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.OpType.Times">
            <summary> * </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.OpType.Divide">
            <summary> / </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.K">
            <summary>
            An expression containing only the variable K
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.K.Solve(System.Int32)">
            <summary>
            Solves the expression
            </summary>
            <param name="k">The value of K</param>
            <returns>The value of the expression</returns>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.K.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.K.Show">
            <summary>
            Creates a maximal bracketed version of the expression
            </summary>
            <returns>This expression in string form</returns>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Constant">
            <summary>
            An expression containing a constant
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Constant.Value">
            <summary>
            The constant
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Constant.Solve(System.Int32)">
            <summary>
            Solves the expression
            </summary>
            <param name="k">The value of K</param>
            <returns>The value of the expression</returns>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Constant.#ctor(System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="value">The value of the constant</param>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Arithmatic.Constant.Show">
            <summary>
            Creates a maximal bracketed version of the expression
            </summary>
            <returns>This expression in string form</returns>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.KArithmatic.Parse(System.String)">
            <summary>
            Parses a string into an expression
            </summary>
            <param name="input">The string to parse</param>
            <returns>The expression (if succesfull)</returns>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.AlphabetValue">
            <summary>
            An input for an alphabet
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.AlphabetValue.Data">
            <summary>
            The data, Paths should be looked up to find the data
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.AlphabetValue.Name">
            <summary>
            The name for this alphabet, to recognize it
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.Report">
            <summary>
            To contain parameters for reporting
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.Report.Parameter">
            <summary>
            A parameter to define how to report the results
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.Report.Parameter.Path">
            <summary>
            The path to save the result to
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.Report.Parameter.CreateName(AssemblyNameSpace.RunParameters.SingleRun)">
            <summary>
            Generates a (unique) name based on the given template
            </summary>
            <param name="r">The values for the parameters</param>
            <returns>A name</returns>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.Report.HTML">
            <summary>
            To indicate to return an HTML report
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.Report.HTML.UseIncludedDotDistribution">
            <summary>
            To indicate if the included Dot distribution should be used
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.Report.CSV">
            <summary>
            To indicate to return a CSVreport
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.Report.CSV.GetID(AssemblyNameSpace.RunParameters.SingleRun)">
            <summary>
            To get an ID for a CSV line
            </summary>
            <param name="r">The values of the parameters for this run</param>
            <returns>An ID</returns>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.Report.FASTA">
            <summary>
            To indicate to return a FASTA report
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.Report.FASTA.MinimalScore">
            <summary>
            The minimal score needed to be included
            </summary>
        </member>
        <member name="T:AssemblyNameSpace.RunParameters.SingleRun">
            <summary>
            ALl parameters for a single run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.SingleRun.ID">
            <summary>
            The unique numeric ID of this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.SingleRun.Runname">
            <summary>
            THe name of this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.SingleRun.Input">
            <summary>
            The input data for this run. A runtype of 'Separate' will result in only one input data in this list.
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.SingleRun.K">
            <summary>
            The value of K used in this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.SingleRun.MinimalHomology">
            <summary>
            The value of MinimalHomology used in this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.SingleRun.DuplicateThreshold">
            <summary>
            The value of DuplicateThreshold used in this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.SingleRun.Reverse">
            <summary>
            The value of Reverse used in this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.SingleRun.Alphabet">
            <summary>
            The alphabet used in this run
            </summary>
        </member>
        <member name="F:AssemblyNameSpace.RunParameters.SingleRun.Report">
            <summary>
            The reports to be generated
            </summary>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.SingleRun.#ctor(System.Int32,System.String,AssemblyNameSpace.RunParameters.Input.Parameter,System.Int32,System.Int32,System.Int32,System.Boolean,AssemblyNameSpace.RunParameters.AlphabetValue,System.Collections.Generic.List{AssemblyNameSpace.RunParameters.Report.Parameter})">
            <summary>
            To create a single run with a single dataparameter as input
            </summary>
            <param name="id">The ID of the run</param>
            <param name="runname">The name of the run</param>
            <param name="input">The input data to be run</param>
            <param name="k">The value of K</param>
            <param name="duplicateThreshold">The value of DuplicateThreshold</param>
            <param name="minimalHomology">The value of MinimalHomology</param>
            <param name="reverse">The value of Reverse</param>
            <param name="alphabet">The alphabet to be used</param>
            <param name="report">The report(s) to be generated</param>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.SingleRun.#ctor(System.Int32,System.String,System.Collections.Generic.List{AssemblyNameSpace.RunParameters.Input.Parameter},System.Int32,System.Int32,System.Int32,System.Boolean,AssemblyNameSpace.RunParameters.AlphabetValue,System.Collections.Generic.List{AssemblyNameSpace.RunParameters.Report.Parameter})">
            <summary>
            To create a single run with a multiple dataparameters as input
            </summary>
            <param name="id">The ID of the run</param>
            <param name="runname">The name of the run</param>
            <param name="input">The input data to be run</param>
            <param name="k">The value of K</param>
            <param name="duplicateThreshold">The value of DuplicateThreshold</param>
            <param name="minimalHomology">The value of MinimalHomology</param>
            <param name="reverse">The value of Reverse</param>
            <param name="alphabet">The alphabet to be used</param>
            <param name="report">The report(s) to be generated</param>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.SingleRun.Display">
            <summary>
            To display the main parameters of this run in a string, mainly for error tracking and debugging purposes.
            </summary>
            <returns>The main parameters</returns>
        </member>
        <member name="M:AssemblyNameSpace.RunParameters.SingleRun.Calculate">
            <summary>
            Runs this run.abstract Runs the assembly, and generates the reports.
            </summary>
        </member>
    </members>
</doc>
