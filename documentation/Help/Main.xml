<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Main</name>
  </assembly>
  <members>
    <member name="T:AssemblyNameSpace.Assembler">
      <summary> The Class with all code to assemble Peptide sequences. </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary> The creator, to set up the default values. Also sets the standard alphabet. </summary>
      <param name="kmer_length_input"> The lengths of the k-mers. </param>
      <param name="minimum_homology_input"> The minimum homology needed to be inserted in the graph as an edge. <see cref="P:AssemblyNameSpace.Assembler.Minimum_homology" /></param>
      <param name="edge_include_limit_input"> The limit to include edges when filtering. </param>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.alphabet">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.alphabet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Assemble">
      <summary> Assemble the reads into the graph, this is logically (one of) the last metods to 
            run on an Assembler, all settings should be defined before running this. </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.condensed_graph">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.condensed_graph</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.edge_include_limit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.edge_include_limit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.getIndexInAlphabet(System.Char)">
      <summary> Find the index of the given character in the alphabet. </summary>
      <param name="c"> The character to lot op. </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.getIndexInAlphabet(System.Char)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.graph">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.graph</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.kmer_length">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.kmer_length</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:AssemblyNameSpace.Assembler.Kmer_length">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:AssemblyNameSpace.Assembler.Kmer_length</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.meta_data">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.meta_data</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.minimum_homology">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.minimum_homology</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:AssemblyNameSpace.Assembler.Minimum_homology">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:AssemblyNameSpace.Assembler.Minimum_homology</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.OpenReads(System.String)">
      <summary> To open a file with reads (should always be run before trying to assemble). 
            It will save the reads in the current Assembler object. </summary>
      <param name="input_file"> The path to the file to read from. </param>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.OutputReport">
      <summary> Outputs some information about the assembly the help validate the output of the assembly. </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.reads">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.reads</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.scoring_matrix">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.scoring_matrix</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.SetAlphabet(System.Collections.Generic.List{System.ValueTuple`4},System.SByte,System.Char)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.SetAlphabet(System.Collections.Generic.List{System.ValueTuple`4},System.SByte,System.Char)</parameter>
          </include>
        </markup>
      </summary>
      <param name="rules">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rules</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.SetAlphabet(System.Collections.Generic.List{System.ValueTuple`4},System.SByte,System.Char)</parameter>
          </include>
        </markup>
      </param>
      <param name="diagonals_value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>diagonals_value</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.SetAlphabet(System.Collections.Generic.List{System.ValueTuple`4},System.SByte,System.Char)</parameter>
          </include>
        </markup>
      </param>
      <param name="input">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.SetAlphabet(System.Collections.Generic.List{System.ValueTuple`4},System.SByte,System.Char)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:AssemblyNameSpace.Assembler.AminoAcid">
      <summary> A struct to function as a wrapper for AminoAcid information, so custom alphabets can 
            be used in an efficient way </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.AminoAcid.#ctor(AssemblyNameSpace.Assembler,System.Char)">
      <summary> The creator of AminoAcids. </summary>
      <param name="asm"> The Assembler that this AminoAcid is used in, to get the alphabet. </param>
      <param name="input"> The character to store in this AminoAcid. </param>
      <returns> Returns a reference to the new AminoAcid. </returns>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.AminoAcid.ArrayEquals(AssemblyNameSpace.Assembler.AminoAcid[],AssemblyNameSpace.Assembler.AminoAcid[])">
      <summary> To check for equality of arrays of AminoAcids. </summary>
      <param name="left"> The first object to check equality with. </param>
      <param name="right"> The second object to check equality with. </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.ArrayEquals(AssemblyNameSpace.Assembler.AminoAcid[],AssemblyNameSpace.Assembler.AminoAcid[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.AminoAcid.ArrayHomology(AssemblyNameSpace.Assembler.AminoAcid[],AssemblyNameSpace.Assembler.AminoAcid[])">
      <summary> Calculating homology between two arrays of AminoAcids, using the scoring matrix 
            of the parent Assembler. </summary>
      <param name="left"> The first object to calculate homology with. </param>
      <param name="right"> The second object to calculate homology with. </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.ArrayHomology(AssemblyNameSpace.Assembler.AminoAcid[],AssemblyNameSpace.Assembler.AminoAcid[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.AminoAcid.ArrayToString(AssemblyNameSpace.Assembler.AminoAcid[])">
      <summary> Will create a string of an array of AminoAcids. </summary>
      <param name="array"> The array to create a string from. </param>
      <returns> Returns the string of the array. </returns>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.AminoAcid.code">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.AminoAcid.code</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:AssemblyNameSpace.Assembler.AminoAcid.Code">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:AssemblyNameSpace.Assembler.AminoAcid.Code</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.AminoAcid.Equals(System.Object)">
      <summary> To check for equality of the AminoAcids. Will return false if the object is not an AminoAcid. </summary>
      <param name="obj"> The object to check equality with. </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.AminoAcid.GetHashCode">
      <summary> To get a hashcode for this AminoAcid. </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.AminoAcid.Homology(AssemblyNameSpace.Assembler.AminoAcid)">
      <summary> Calculating homology, using the scoring matrix of the parent Assembler. </summary>
      <param name="right">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>right</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.Homology(AssemblyNameSpace.Assembler.AminoAcid)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.Homology(AssemblyNameSpace.Assembler.AminoAcid)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.AminoAcid.op_Equality(AssemblyNameSpace.Assembler.AminoAcid,AssemblyNameSpace.Assembler.AminoAcid)">
      <summary> To check for equality of AminoAcids. </summary>
      <param name="x">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.op_Equality(AssemblyNameSpace.Assembler.AminoAcid,AssemblyNameSpace.Assembler.AminoAcid)</parameter>
          </include>
        </markup>
      </param>
      <param name="y">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.op_Equality(AssemblyNameSpace.Assembler.AminoAcid,AssemblyNameSpace.Assembler.AminoAcid)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.op_Equality(AssemblyNameSpace.Assembler.AminoAcid,AssemblyNameSpace.Assembler.AminoAcid)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.AminoAcid.op_Inequality(AssemblyNameSpace.Assembler.AminoAcid,AssemblyNameSpace.Assembler.AminoAcid)">
      <summary> To check for inequality of AminoAcids. </summary>
      <param name="x">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.op_Inequality(AssemblyNameSpace.Assembler.AminoAcid,AssemblyNameSpace.Assembler.AminoAcid)</parameter>
          </include>
        </markup>
      </param>
      <param name="y">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.op_Inequality(AssemblyNameSpace.Assembler.AminoAcid,AssemblyNameSpace.Assembler.AminoAcid)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.op_Inequality(AssemblyNameSpace.Assembler.AminoAcid,AssemblyNameSpace.Assembler.AminoAcid)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.AminoAcid.parent">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.AminoAcid.parent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.AminoAcid.ToString">
      <summary> Will create a string of this AminoAcid. Consiting of the character used to 
            create this AminoAcid. </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.AminoAcid.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:AssemblyNameSpace.Assembler.CondensedNode">
      <summary> Nodes in the condensed graph with a variable sequence length. </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.CondensedNode.#ctor(System.Collections.Generic.List{AssemblyNameSpace.Assembler.AminoAcid},System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>AssemblyNameSpace.Assembler.CondensedNode</parameter>
          </include>
        </markup>
      </summary>
      <param name="sequence">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sequence</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.CondensedNode.#ctor(System.Collections.Generic.List{AssemblyNameSpace.Assembler.AminoAcid},System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})</parameter>
          </include>
        </markup>
      </param>
      <param name="index">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.CondensedNode.#ctor(System.Collections.Generic.List{AssemblyNameSpace.Assembler.AminoAcid},System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})</parameter>
          </include>
        </markup>
      </param>
      <param name="forward_edges">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>forward_edges</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.CondensedNode.#ctor(System.Collections.Generic.List{AssemblyNameSpace.Assembler.AminoAcid},System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})</parameter>
          </include>
        </markup>
      </param>
      <param name="backward_edges">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backward_edges</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.CondensedNode.#ctor(System.Collections.Generic.List{AssemblyNameSpace.Assembler.AminoAcid},System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.CondensedNode.BackwardEdges">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.CondensedNode.BackwardEdges</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.CondensedNode.ForwardEdges">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.CondensedNode.ForwardEdges</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.CondensedNode.Index">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.CondensedNode.Index</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.CondensedNode.Sequence">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.CondensedNode.Sequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.CondensedNode.Visited">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.CondensedNode.Visited</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:AssemblyNameSpace.Assembler.MetaInformation">
      <summary> A struct to hold meta information about the assembly to keep it organised 
            and to report back to the user. </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.MetaInformation.graph_time">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.MetaInformation.graph_time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.MetaInformation.kmers">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.MetaInformation.kmers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.MetaInformation.kmin1_mers">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.MetaInformation.kmin1_mers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.MetaInformation.kmin1_mers_raw">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.MetaInformation.kmin1_mers_raw</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.MetaInformation.path_time">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.MetaInformation.path_time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.MetaInformation.pre_time">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.MetaInformation.pre_time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.MetaInformation.reads">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.MetaInformation.reads</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.MetaInformation.sequence_filter_time">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.MetaInformation.sequence_filter_time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.MetaInformation.sequences">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.MetaInformation.sequences</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.MetaInformation.total_time">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.MetaInformation.total_time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:AssemblyNameSpace.Assembler.Node">
      <summary> Nodes in the graph with a sequence length of K-1. </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Node.#ctor(AssemblyNameSpace.Assembler.AminoAcid[],System.Int32,System.Int32)">
      <summary> The creator of Nodes. </summary>
      <param name="seq"> The sequence of this Node. </param>
      <param name="multi"> The multiplicity of this Node. </param>
      <param name="edge_include_limit_input"> The limit to include edges when filtering. </param>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Node.AddBackwardEdge(System.Int32,System.Int32,System.Int32)">
      <summary> To add a backward edge to the Node. </summary>
      <param name="target"> The index of the Node where this edge comes from. </param>
      <param name="score1"> The homology of the edge with the first Node. </param>
      <param name="score2"> The homology of the edge with the second Node. </param>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Node.AddForwardEdge(System.Int32,System.Int32,System.Int32)">
      <summary> To add a forward edge to the Node. Wil only be added if the score is high enough. </summary>
      <param name="target"> The index of the Node where this edge goes to. </param>
      <param name="score1"> The homology of the edge with the first Node. </param>
      <param name="score2"> The homology of the edge with the second Node. </param>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.Node.backwardEdges">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.Node.backwardEdges</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:AssemblyNameSpace.Assembler.Node.BackwardEdges">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:AssemblyNameSpace.Assembler.Node.BackwardEdges</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.Node.edge_include_limit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.Node.edge_include_limit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Node.EdgesCount">
      <summary> To get the amount of edges (forward and backward). </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.Node.EdgesCount</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Node.filterBackwardEdges">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.Node.filterBackwardEdges</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Node.filterForwardEdges">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.Node.filterForwardEdges</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.Node.forwardEdges">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.Node.forwardEdges</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:AssemblyNameSpace.Assembler.Node.ForwardEdges">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:AssemblyNameSpace.Assembler.Node.ForwardEdges</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Node.HasBackwardEdges">
      <summary> To check if the Node has backward edges. </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.Node.HasBackwardEdges</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Node.HasForwardEdges">
      <summary> To check if the Node has forward edges. </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AssemblyNameSpace.Assembler.Node.HasForwardEdges</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.Node.max_backward_score">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.Node.max_backward_score</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.Node.max_forward_score">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.Node.max_forward_score</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Node.MaxBackwardEdge">
      <summary> Gets the backward edge with the highest total homology of all 
            edges in this Node. </summary>
      <returns> It returns the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. </returns>
      <exception cref="T:System.Exception"> It will result in an Exception if the Node has no backward edges. </exception>
    </member>
    <member name="M:AssemblyNameSpace.Assembler.Node.MaxForwardEdge">
      <summary> Gets the forward edge with the highest total homology of all 
            edges in this Node. </summary>
      <returns> It returns the index 
            of the Node where the edge goes to, the homology with the first Node 
            and the homology with the second Node in this order. </returns>
      <exception cref="T:System.Exception"> It will result in an Exception if the Node has no forward edges. </exception>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.Node.multiplicity">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.Node.multiplicity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:AssemblyNameSpace.Assembler.Node.Multiplicity">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:AssemblyNameSpace.Assembler.Node.Multiplicity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.Node.sequence">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.Node.sequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:AssemblyNameSpace.Assembler.Node.Sequence">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:AssemblyNameSpace.Assembler.Node.Sequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:AssemblyNameSpace.Assembler.Node.Visited">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:AssemblyNameSpace.Assembler.Node.Visited</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:AssemblyNameSpace.HelperFunctionality">
      <summary> A class to store extension methods to help in the process of coding. </summary>
    </member>
    <member name="M:AssemblyNameSpace.HelperFunctionality.SubArray``1(``0[],System.Int32,System.Int32)">
      <summary> To copy a subarray to a new array. </summary>
      <param name="data"> The old array to copy from. </param>
      <param name="index"> The index to start copying. </param>
      <param name="length"> The length of the created subarray. </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:AssemblyNameSpace.HelperFunctionality.SubArray``1(``0[],System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns> Returns a new array with clones of the original array. </returns>
    </member>
    <member name="T:AssemblyNameSpace.ToRunWithCommandLine">
      <summary> A Class to be able to run the code from the commandline. To be able to test it easily. 
            This will be rewritten when the code is moved to its new repository </summary>
    </member>
    <member name="M:AssemblyNameSpace.ToRunWithCommandLine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>AssemblyNameSpace.ToRunWithCommandLine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:AssemblyNameSpace.ToRunWithCommandLine.Main">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:AssemblyNameSpace.ToRunWithCommandLine.Main</parameter>
          </include>
        </markup>
      </summary>
    </member>
  </members>
</doc>